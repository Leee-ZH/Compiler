!		!		
%		%		
&		&		
(		(		
)		)		
*		*		
+		+		
,		,		
-		-		
.		.		
/		/		
:		:		
;		;		
<		<		
=		=		
>		>		
?		?		
ADD_ASSIGN		ADD_ASSIGN		
AND_ASSIGN		AND_ASSIGN		
AND_OP		AND_OP		
AUTO		AUTO		
BREAK		BREAK		
CASE		CASE		
CHAR		CHAR		
CONST		CONST		
CONSTANT		CONSTANT		
CONTINUE		CONTINUE		
DEC_OP		DEC_OP		
DEFAULT		DEFAULT		
DIV_ASSIGN		DIV_ASSIGN		
DO		DO		
DOUBLE		DOUBLE		
ELLIPSIS		ELLIPSIS		
ELSE		ELSE		
ENUM		ENUM		
EQ_OP		EQ_OP		
EXTERN		EXTERN		
FLOAT		FLOAT		
FOR		FOR		
GE_OP		GE_OP		
GOTO		GOTO		
IDENTIFIER		IDENTIFIER		
IF		IF		
INC_OP		INC_OP		
INT		INT		
LEFT_ASSIGN		LEFT_ASSIGN		
LEFT_OP		LEFT_OP		
LE_OP		LE_OP		
LONG		LONG		
MOD_ASSIGN		MOD_ASSIGN		
MUL_ASSIGN		MUL_ASSIGN		
NE_OP		NE_OP		
OR_ASSIGN		OR_ASSIGN		
OR_OP		OR_OP		
PTR_OP		PTR_OP		
REGISTER		REGISTER		
RETURN		RETURN		
RIGHT_ASSIGN		RIGHT_ASSIGN		
RIGHT_OP		RIGHT_OP		
SHORT		SHORT		
SIGNED		SIGNED		
SIZEOF		SIZEOF		
STATIC		STATIC		
STRING_LITERAL		STRING_LITERAL		
STRUCT		STRUCT		
SUB_ASSIGN		SUB_ASSIGN		
SWITCH		SWITCH		
TYPEDEF		TYPEDEF		
TYPE_NAME		TYPE_NAME		
UNION		UNION		
UNSIGNED		UNSIGNED		
VOID		VOID		
VOLATILE		VOLATILE		
WHILE		WHILE		
XOR_ASSIGN		XOR_ASSIGN		
[		[		
]		]		
^		^		
abstract_declarator		pointer		direct_abstract_declarator		pointer	direct_abstract_declarator		
additive_expression		multiplicative_expression		additive_expression	+	multiplicative_expression		additive_expression	-	multiplicative_expression		
and_expression		equality_expression		and_expression	&	equality_expression		
argument_expression_list		assignment_expression		argument_expression_list	,	assignment_expression		
assignment_expression		conditional_expression		unary_expression	assignment_operator	assignment_expression		
assignment_operator		=		MUL_ASSIGN		DIV_ASSIGN		MOD_ASSIGN		ADD_ASSIGN		SUB_ASSIGN		LEFT_ASSIGN		RIGHT_ASSIGN		AND_ASSIGN		XOR_ASSIGN		OR_ASSIGN		
cast_expression		unary_expression		(	type_name	)	cast_expression		
compound_statement		{	}		{	statement_list	}		{	declaration_list	}		{	declaration_list	statement_list	}		
conditional_expression		logical_or_expression		logical_or_expression	?	expression	:	conditional_expression		
constant_expression		conditional_expression		
declaration		declaration_specifiers	;		declaration_specifiers	init_declarator_list	;		
declaration_list		declaration		declaration_list	declaration		
declaration_specifiers		storage_class_specifier		storage_class_specifier	declaration_specifiers		type_specifier		type_specifier	declaration_specifiers		type_qualifier		type_qualifier	declaration_specifiers		
declarator		pointer	direct_declarator		direct_declarator		
direct_abstract_declarator		(	abstract_declarator	)		[	]		[	constant_expression	]		direct_abstract_declarator	[	]		direct_abstract_declarator	[	constant_expression	]		(	)		(	parameter_type_list	)		direct_abstract_declarator	(	)		direct_abstract_declarator	(	parameter_type_list	)		
direct_declarator		IDENTIFIER		(	declarator	)		direct_declarator	[	constant_expression	]		direct_declarator	[	]		direct_declarator	(	parameter_type_list	)		direct_declarator	(	identifier_list	)		direct_declarator	(	)		
enum_specifier		ENUM	{	enumerator_list	}		ENUM	IDENTIFIER	{	enumerator_list	}		ENUM	IDENTIFIER		
enumerator		IDENTIFIER		IDENTIFIER	=	constant_expression		
enumerator_list		enumerator		enumerator_list	,	enumerator		
equality_expression		relational_expression		equality_expression	EQ_OP	relational_expression		equality_expression	NE_OP	relational_expression		
exclusive_or_expression		and_expression		exclusive_or_expression	^	and_expression		
expression		assignment_expression		expression	,	assignment_expression		
expression_statement		;		expression	;		
external_declaration		function_definition		declaration		
function_definition		declaration_specifiers	declarator	declaration_list	compound_statement		declaration_specifiers	declarator	compound_statement		declarator	declaration_list	compound_statement		declarator	compound_statement		
identifier_list		IDENTIFIER		identifier_list	,	IDENTIFIER		
inclusive_or_expression		exclusive_or_expression		inclusive_or_expression	|	exclusive_or_expression		
init_declarator		declarator		declarator	=	initializer		
init_declarator_list		init_declarator		init_declarator_list	,	init_declarator		
initializer		assignment_expression		{	initializer_list	}		{	initializer_list	,	}		
initializer_list		initializer		initializer_list	,	initializer		
iteration_statement		WHILE	(	expression	)	statement		DO	statement	WHILE	(	expression	)	;		FOR	(	expression_statement	expression_statement	)	statement		FOR	(	expression_statement	expression_statement	expression	)	statement		
jump_statement		GOTO	IDENTIFIER	;		CONTINUE	;		BREAK	;		RETURN	;		RETURN	expression	;		
labeled_statement		IDENTIFIER	:	statement		CASE	constant_expression	:	statement		DEFAULT	:	statement		
logical_and_expression		inclusive_or_expression		logical_and_expression	AND_OP	inclusive_or_expression		
logical_or_expression		logical_and_expression		logical_or_expression	OR_OP	logical_and_expression		
multiplicative_expression		cast_expression		multiplicative_expression	*	cast_expression		multiplicative_expression	/	cast_expression		multiplicative_expression	%	cast_expression		
parameter_declaration		declaration_specifiers	declarator		declaration_specifiers	abstract_declarator		declaration_specifiers		
parameter_list		parameter_declaration		parameter_list	,	parameter_declaration		
parameter_type_list		parameter_list		parameter_list	,	ELLIPSIS		
pointer		*		*	type_qualifier_list		*	pointer		*	type_qualifier_list	pointer		
postfix_expression		primary_expression		postfix_expression	[	expression	]		postfix_expression	(	)		postfix_expression	(	argument_expression_list	)		postfix_expression	.	IDENTIFIER		postfix_expression	PTR_OP	IDENTIFIER		postfix_expression	INC_OP		postfix_expression	DEC_OP		
primary_expression		IDENTIFIER		CONSTANT		STRING_LITERAL		(	expression	)		
relational_expression		shift_expression		relational_expression	<	shift_expression		relational_expression	>	shift_expression		relational_expression	LE_OP	shift_expression		relational_expression	GE_OP	shift_expression		
selection_statement		IF	(	expression	)	statement		IF	(	expression	)	statement	ELSE	statement		SWITCH	(	expression	)	statement		
shift_expression		additive_expression		shift_expression	LEFT_OP	additive_expression		shift_expression	RIGHT_OP	additive_expression		
specifier_qualifier_list		type_specifier	specifier_qualifier_list		type_specifier		type_qualifier	specifier_qualifier_list		type_qualifier		
statement		labeled_statement		compound_statement		expression_statement		selection_statement		iteration_statement		jump_statement		
statement_list		statement		statement_list	statement		
storage_class_specifier		TYPEDEF		EXTERN		STATIC		AUTO		REGISTER		
struct_declaration		specifier_qualifier_list	struct_declarator_list	;		
struct_declaration_list		struct_declaration		struct_declaration_list	struct_declaration		
struct_declarator		declarator		:	constant_expression		declarator	:	constant_expression		
struct_declarator_list		struct_declarator		struct_declarator_list	,	struct_declarator		
struct_or_union		STRUCT		UNION		
struct_or_union_specifier		struct_or_union	IDENTIFIER	{	struct_declaration_list	}		struct_or_union	{	struct_declaration_list	}		struct_or_union	IDENTIFIER		
translation_unit		external_declaration		translation_unit	external_declaration		
translation_unit!		translation_unit		
type_name		specifier_qualifier_list		specifier_qualifier_list	abstract_declarator		
type_qualifier		CONST		VOLATILE		
type_qualifier_list		type_qualifier		type_qualifier_list	type_qualifier		
type_specifier		VOID		CHAR		SHORT		INT		LONG		FLOAT		DOUBLE		SIGNED		UNSIGNED		struct_or_union_specifier		enum_specifier		TYPE_NAME		
unary_expression		postfix_expression		INC_OP	unary_expression		DEC_OP	unary_expression		unary_operator	cast_expression		SIZEOF	unary_expression		SIZEOF	(	type_name	)		
unary_operator		&		*		+		-		~		!		
{		{		
|		|		
}		}		
~		~	